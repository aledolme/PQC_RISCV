// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package keccak_reg_pkg;

  // Param list
  parameter int DIN = 2;
  parameter int DOUT = 2;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic [31:0] q;
  } keccak_reg2hw_din_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } start;
    struct packed {
      logic        q;
      logic        qe;
    } din_valid;
    struct packed {
      logic        q;
      logic        qe;
    } last_block;
  } keccak_reg2hw_ctrl1_reg_t;


  typedef struct packed {
    logic [31:0] d;
  } keccak_hw2reg_dout_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } start;
    struct packed {
      logic        d;
    } din_valid;
    struct packed {
      logic        d;
    } last_block;
  } keccak_hw2reg_ctrl1_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } dout_valid;
    struct packed {
      logic        d;
    } buffer_full;
    struct packed {
      logic        d;
    } ready;
  } keccak_hw2reg_status_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    keccak_reg2hw_din_mreg_t [1:0] din; // [70:7]
    keccak_reg2hw_ctrl1_reg_t ctrl1; // [6:1]
  } keccak_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    keccak_hw2reg_dout_mreg_t [1:0] dout; // [70:7]
    keccak_hw2reg_ctrl1_reg_t ctrl1; // [6:1]
    keccak_hw2reg_status_reg_t status; // [0:1]
  } keccak_hw2reg_t;

  // Register Address
  parameter logic [4:0] KECCAK_DIN_0_OFFSET = 5'h 0;
  parameter logic [4:0] KECCAK_DIN_1_OFFSET = 5'h 4;
  parameter logic [4:0] KECCAK_DOUT_0_OFFSET = 5'h 8;
  parameter logic [4:0] KECCAK_DOUT_1_OFFSET = 5'h c;
  parameter logic [4:0] KECCAK_CTRL1_OFFSET = 5'h 10;
  parameter logic [4:0] KECCAK_STATUS_OFFSET = 5'h 14;


  // Register Index
  typedef enum int {
    KECCAK_DIN_0,
    KECCAK_DIN_1,
    KECCAK_DOUT_0,
    KECCAK_DOUT_1,
    KECCAK_CTRL1,
    KECCAK_STATUS
  } keccak_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] KECCAK_PERMIT [6] = '{
    4'b 1111, // index[0] KECCAK_DIN_0
    4'b 1111, // index[1] KECCAK_DIN_1
    4'b 1111, // index[2] KECCAK_DOUT_0
    4'b 1111, // index[3] KECCAK_DOUT_1
    4'b 0001, // index[4] KECCAK_CTRL1
    4'b 0001  // index[5] KECCAK_STATUS
  };
endpackage

